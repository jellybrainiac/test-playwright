import { chromium } from 'playwright';
import readline from 'readline';

const email = 'dangtrungkienkk14@gmail.com';
const password = 'Kien@2025';

const loginUrl = 'https://sso.oryza.vn/realms/oryza-systems/protocol/openid-connect/auth?client_id=oryza-metadata&scope=openid%20email%20profile&response_type=code&redirect_uri=https%3A%2F%2Fmetadata.oryza.vn%2Fapi%2Fauth%2Fcallback%2Fkeycloak&state=abc&code_challenge=xyz&code_challenge_method=S256';


// H√†m ƒë·ªÉ ƒë·ª£i user input
function waitForUserInput(message) {
  return new Promise((resolve) => {
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    
    rl.question(message, (answer) => {
      rl.close();
      resolve(answer);
    });
  });
}

(async () => {
  let browser;
  
  try {
    // Kh·ªüi ƒë·ªông browser
    browser = await chromium.launch({ 
      headless: false,
      slowMo: 500 // L√†m ch·∫≠m c√°c thao t√°c ƒë·ªÉ d·ªÖ theo d√µi
    });
    
    const page = await browser.newPage();
    
    // Thi·∫øt l·∫≠p timeout d√†i h∆°n
    page.setDefaultTimeout(30000);

    console.log('üöÄ ƒêang m·ªü trang ƒëƒÉng nh·∫≠p...');
    await page.goto(loginUrl);

    // ƒê·ª£i trang load xong
    await page.waitForLoadState('networkidle');

    console.log('üìù T√¨m v√† click n√∫t ƒêƒÉng k√Ω...');
    
    // Th·ª≠ nhi·ªÅu c√°ch ƒë·ªÉ t√¨m n√∫t ƒëƒÉng k√Ω
    try {
      // Th·ª≠ t√¨m theo text
      await page.getByRole('link', { name: /ƒëƒÉng k√Ω/i }).click({ timeout: 5000 });
    } catch (error) {
      console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y link "ƒêƒÉng k√Ω", th·ª≠ t√¨m button...');
      try {
        await page.getByRole('button', { name: /ƒëƒÉng k√Ω/i }).click({ timeout: 5000 });
      } catch (error2) {
        console.log(' Kh√¥ng t√¨m th·∫•y button "ƒêƒÉng k√Ω", th·ª≠ selector CSS...');
        await page.click('text=ƒêƒÉng k√Ω', { timeout: 5000 });
      }
    }

    // ƒê·ª£i form ƒëƒÉng k√Ω xu·∫•t hi·ªán
    await page.waitForLoadState('networkidle');
    console.log(' ƒê√£ v√†o trang ƒëƒÉng k√Ω');

    console.log(' ƒêang ƒëi·ªÅn email...');
    // T√¨m v√† ƒëi·ªÅn email - th·ª≠ nhi·ªÅu c√°ch
    try {
      await page.getByRole('textbox', { name: /email/i }).fill(email);
    } catch (error) {
      // Th·ª≠ c√°ch kh√°c n·∫øu kh√¥ng t√¨m th·∫•y
      await page.fill('input[type="email"]', email);
    }

    console.log('üîê ƒêang ƒëi·ªÅn m·∫≠t kh·∫©u...');
    // ƒêi·ªÅn m·∫≠t kh·∫©u
    const passwordFields = await page.getByRole('textbox', { name: /m·∫≠t kh·∫©u|password/i }).all();
    
    if (passwordFields.length >= 1) {
      await passwordFields[0].fill(password); // M·∫≠t kh·∫©u
    }
    
    if (passwordFields.length >= 2) {
      await passwordFields[1].fill(password); // X√°c nh·∫≠n m·∫≠t kh·∫©u
    }

    // Ki·ªÉm tra c√≥ fields n√†o kh√°c c·∫ßn ƒëi·ªÅn kh√¥ng
    const allInputs = await page.locator('input[type="text"], input[type="email"], input[type="password"]').all();
    console.log(` T√¨m th·∫•y ${allInputs.length} input fields`);

    console.log(' T√¨m n√∫t submit...');
    // Click n√∫t ƒëƒÉng k√Ω/t·∫°o m·ªõi
    try {
      await page.getByRole('button', { name: /t·∫°o m·ªõi|ƒëƒÉng k√Ω|register|submit/i }).click();
    } catch (error) {
      console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y n√∫t submit, th·ª≠ t√¨m b·∫±ng CSS selector...');
      await page.click('button[type="submit"], input[type="submit"]');
    }

    console.log('‚è∏ Vui l√≤ng x√°c nh·∫≠n email ho·∫∑c ho√†n t·∫•t c√°c b∆∞·ªõc th·ªß c√¥ng...');
    await waitForUserInput('Nh·∫•n Enter khi ƒë√£ ho√†n t·∫•t x√°c nh·∫≠n: ');

    console.log(' Ti·∫øp t·ª•c bot sau khi x√°c nh·∫≠n...');

  } catch (error) {
    console.error(' L·ªói:', error.message);
  } finally {
    // H·ªèi user c√≥ mu·ªën ƒë√≥ng browser kh√¥ng
    const shouldClose = await waitForUserInput('ƒê√≥ng tr√¨nh duy·ªát? (y/n): ');
    
    if (shouldClose.toLowerCase() === 'y' && browser) {
      await browser.close();
      console.log('ƒê√£ ƒë√≥ng tr√¨nh duy·ªát');
    }
  }
})();